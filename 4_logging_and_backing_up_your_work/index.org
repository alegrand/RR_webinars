#+TITLE:     Logging and Backing up your Work
#+AUTHOR:    Vincent Danjean, Arnaud Legrand, Luka Stanisic
#+DATE: June 7, 2016
#+STARTUP: overview indent

*This seminar took place on June 7, 2016 @ 1:30PM-4:30PM (UTC+2). The
link to the video is below.*

* Table of Contents                                                     :TOC:
- [[#practical-information][Practical Information]]
  - [[#webcastvideo][Webcast/Video]]
  - [[#persons-in-charge][Persons in charge]]
  - [[#locations][Locations]]
- [[#practical-session-requirements][Practical Session Requirements]]
  - [[#gitting-started-courtesy-of-hackberkeley][Gitting Started (courtesy of HackBerkeley)]]
  - [[#installing-a-gui-smartgit][Installing a GUI: SmartGit]]
- [[#git-labbook-demo][Git-labbook Demo]]
  - [[#installation-of-git-labbook][Installation of Git-labbook]]
  - [[#parallel-quicksort-study][Parallel Quicksort Study]]
  - [[#demo][Demo]]

* Practical Information
Vincent Danjean, Arnaud Legrand and Luka Stanisic provided a (not so
short) introduction to git, a distributed version control system, that
will allow you to efficiently and reliably log and back up your work.
** Webcast/Video

Here is the *[[https://gricad.univ-grenoble-alpes.fr/video/logging-and-backing-your-work][link to the video]]*. If you have any trouble with the
flashplayer, here is a *[[http://newstream.u-ga.fr/2016-06-07_Reproducible-Research_Danjean-Legrand-Stasinic.mp4][direct link to the mpeg4 video]]*. 

#+BEGIN_CENTER
[[https://gricad.univ-grenoble-alpes.fr/video/logging-and-backing-your-work][file:video_thn.png]]
#+END_CENTER

Here are the [[file:slides/talk_16_06_07_Webinar.pdf][slides]].

To interact during the presentation (questions, comments), *we 
used this [[https://pad.inria.fr/p/sg9M7evYcdgXYWVQ][pad]]* that we will [[file:pad.org][keep for the record]].
** Persons in charge
   - Grenoble: Arnaud Legrand, Frédéric Desprez, Pierre Neyron
   - Bordeaux: Stanisic, Emmanuel Agullo, Nicolas P. Rougier,
     Ludovic Courtès, ...
   - Rennes: Martin Quinson
   - Besançon: Louis-Claude Canon
** Locations
   - Grenoble: [[https://www.google.fr/maps/place/45%25C2%25B011'26.5%2522N+5%25C2%25B046'02.6%2522E/@45.1907069,5.7668488,19z/data=!3m1!4b1!4m5!3m4!1s0x0:0x0!8m2!3d45.190706!4d5.767396][Imag Amphitheater]] on Campus
* Practical Session Requirements
Basic Git installation and your favorite GUI (unless you are really hardcore and prefer doing everything in command line). 

** Gitting Started (courtesy of [[https://github.com/HackBerkeley/intro-git][HackBerkeley]])

| Operating System | Download/Install                                                                                                                                                                                                                                                                                 |
|------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| OS X             | Download from http://git-scm.com/download/mac                                                                                                                                                                                                                                                    |
| Windows          | Download from http://git-scm.com/download/win - Two programs will be installed: Git BASH and Git GUI. Use Git BASH! Although the GUI can perform almost all the same functions as BASH, it's great to get experience working from the command line. You can use unix/linux commands within BASH. |
| Linux            | Ubuntu, Debian, and Mint users can run from their terminal: =sudo apt-get install git=. Fedora Users: =sudo yum install git=                                                                                                                                                                     |


** Installing a GUI: [[http://www.syntevo.com/smartgit/][SmartGit]]
There are many graphical interfaces for Git and we recommend using
SmartGit, for the following reasons:

 - It is nice and shiny \smiley
 - It has smart default configurations for Git commands
 - It can contain multiple projects
 - It works with Mercurial and SVN as well
 - It is portable to any operating system (Linux, Windows, OS X)
 - It is free (for non-commercial use)
 - It is up-to-date, supporting advanced Git features
 - It is well integrated with popular platforms (GitHub, BitBucket, etc.)

 Unfortunately, SmartGit is not open source and it is written in Java,
 but there is no free lunch.

 To install SmartGit, download it from the following page:
 http://www.syntevo.com/smartgit/download and follow the
 instructions. The first time you launch the application, in the first
 step, you will be asked to choose your license type. Be sure to
 change it for "Non-commercial use only" (unless you are working on a
 commercial code of course). For the rest of the installation, unless
 you know exactly what you are doing, we suggest to you to keep the
 default options.
* Git-labbook Demo
Git-labbook is a git branching model adapted to experimental
research. More information can be found on the project [[https://github.com/Git-labbook/git-labbook][homepage]].

** Installation of Git-labbook

  You can clone git-labbook from GitHub and install it using
  Makefiles.

#+begin_src sh :results none :session org-sh :dir /tmp/
git clone git@github.com:Git-labbook/git-labbook.git git-labbook
cd git-labbook

dzil build

make Makefile.PL
make
#+end_src

  At this point, there are certain perl package requirements and the
  list is available on the project [[https://github.com/Git-labbook/git-labbook][homepage]]. Please indicate if some
  packages are missing for you or if you have any problems installing
  the software.
  
** Parallel Quicksort Study

  To demonstate git-labbook commands, we are using an already
  performed reproducible research example [[https://github.com/stanisic/RR_example][RR_example]]. Commits of
  RR_example have been transformed into patches, that we simply apply
  in the following demo. This way, the main focus stays on Git
  branching system and git-labbook commands. However, we still
  encourage readers to explore the content of the RR_example study
  (especially LabBook.org) as it contains many useful tips about
  properly writing laboratory notebook.

** Demo
*** Initialization

  Cleanup and environment preparation.

#+begin_src sh :results output :session org-sh
set -ex

cd scenario.d 

mkdir -p repo
rm -rvf repo/* 
rm -rf repo/.??* 
rm -rvf repoMachine2/*
rm -rf repoMachine2/.??*

DATADIR="$(pwd)/data"
export PATH="$(pwd)/../blib/script:$(pwd)/../bin:/home/vdanjean/debian/mainteneur/org-merge-driver/upstream/org-merge-driver/build/src:$PATH"
export PERL5LIB="$(pwd)/../blib/lib:$(pwd)/../lib:$PATH"
#+end_src

  Check that options are correctly connected to config variables.

#+begin_src sh :results output :session org-sh
git-labbook help
#+end_src

  Initialize Git repository, add few commits.

#+begin_src sh :results output :session org-sh
mkdir -p repo
cd repo

git init
git am $DATADIR/000[1234]-*
#+end_src

  Initialize Git-labbook. This creates the whole directory structure,
  laboratory notebook file and an initial commit.

#+begin_src sh :results output :session org-sh
git-labbook init
#+end_src

  Adding some scripts into data branch.

#+begin_src sh :results output :session org-sh
git checkout data
git am $DATADIR/001[0]-*
#+end_src

*** Doing first experiments

   Start first experimental campaign by creating a new experimental
   branch.

#+begin_src sh :results output :session org-sh
git checkout master
git-labbook xp start xp1 --branch xp1 --no-labbook-entry
#+end_src

   Do some modifications, execute the experiments and add the measured
   data.

#+begin_src sh :results output :session org-sh
git am $DATADIR/000[56]-*
#+end_src

   Continue doing some modifications inside the master branch. One may
   also realize that some code in the experimental branch is useful
   for the whole project, so it can be cherry-picked into the source
   branch.
   
#+begin_src sh :results output :session org-sh
git checkout master
git am $DATADIR/000[78]-*

git am $DATADIR/001[12345]-*
#+end_src

   Go back to the experiment branch and improve laboratory notebook
   text.

#+begin_src sh :results output :session org-sh
git checkout xp1
git am $DATADIR/000[9]-*
#+end_src

   When concluded that experiments are finished, merge the
   experimental branch into data branch.

#+begin_src sh :results output :session org-sh
git checkout xp1
git-labbook xp finish
#+end_src

   Repeat a similar process for another experimental campaign.

#+begin_src sh :results output :session org-sh
git checkout master

git-labbook xp start xp2
git am $DATADIR/001[6]-*

git checkout data
git am $DATADIR/001[7]-*

git checkout xp/xp2
git-labbook xp finish
#+end_src

   Additionally, when a certain important source code developments are
   performed, one can add a Git tag (typically for the code releases).

#+begin_src sh :results output :session org-sh
git checkout master
git am $DATADIR/001[9]-*
git tag stable0.9
#+end_src

*** Performing experiments on another machine

   One might want to perform experiments on another machine. For that,
   first the project needs to be cloned. In this example, this is
   simply done in another folder of the same computer, but it can be
   done similarly from a different machine.

#+begin_src sh :results output :session org-sh
cd ..
git-labbook clone repo repoMachine2
cd repoMachine2
#+end_src

   Start experiments on that machine.

#+begin_src sh :results output :session org-sh
git-labbook xp start xp3 -b xp3 --no-labbook-entry
git am $DATADIR/002[01234]-*
#+end_src

   At some point, push the experiments to the remote repository.

#+begin_src sh :results output :session org-sh
git-labbook xp push
#+end_src

   When the experimental campaign is finished, the experimental branch
   can be merged into the data branch.

#+begin_src sh :results output :session org-sh
cd ..
cd repo

git checkout xp3
git-labbook xp finish
#+end_src

   At the end, the whole study is reproduced!

#+begin_src sh :results output :session org-sh
git checkout master
git am $DATADIR/002[6]-*

echo "SUCCESS REBUILD"
#+end_src
   
